name: Continuous Delivery
run-name: Upload CLI release to S3
on:
  workflow_run:
    workflows:
      - Continuous Integration
    branches:
      - main
    types:
      - completed

jobs:
  upload:
    name: Upload artifacts
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      id-token: write
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            keep-derivations = true
            keep-outputs = true
      - run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 LDFLAGS="-w -s" nix develop --command mage
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::152560469324:role/captain-cli-cd
          role-duration-seconds: 900
      - run: |
          version=$(nix develop --command go run ./cmd/captain --version)
          artifact_name=$(echo "captain-${{ matrix.os }}-${{ matrix.arch }}-$version" | tr '[:upper:]' '[:lower:]')
          aws s3 mv ./captain "s3://terraform-20221109133415397600000001/$artifact_name"
        env:
          RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
        if: ${{ matrix.os != 'windows' }}
      - run: |
          version=$(nix develop --command go run ./cmd/captain --version)
          artifact_name=$(echo "captain-${{ matrix.os }}-${{ matrix.arch }}-$version" | tr '[:upper:]' '[:lower:]')
          aws s3 mv ./captain.exe "s3://terraform-20221109133415397600000001/$artifact_name"
        env:
          RWX_ACCESS_TOKEN: ${{ secrets.RWX_ACCESS_TOKEN }}
        if: ${{ matrix.os == 'windows' }}

  update-versions-json:
    name: Update versions.json
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      id-token: write
    needs: upload
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::152560469324:role/captain-cli-cd
          role-duration-seconds: 900
      - run: |
          versions=$(
            aws s3api list-objects --bucket terraform-20221109133415397600000001 --no-paginate --query 'Contents[].Key' --output=json \
            | jq -r '.[]' | grep "[-]v" | sed 's/.*-v/v/' | sed '/-/!{s/$/_/}' | sort -ruV | sed 's/_$//' | grep -v "^v1$" \
          )
          encodedVersions=$(printf "%s\n" $versions | jq --raw-input | jq --slurp)
          latestV1=$(printf "%s\n" $versions | grep -v "-" | grep "v1" | head -n 1)

          jq -n \
            --argjson versions "$encodedVersions" \
            --arg latestV1 "$latestV1" \
           '{captain: {v1: $latestV1, versions: $versions}}' > versions.json

          aws s3 mv ./versions.json "s3://terraform-20221109133415397600000001/versions.json"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/versions.json"

          echo "latestV1=$latestV1" >> "$GITHUB_OUTPUT"

  update-versioned-binaries:
    name: Update versioned binaries
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      id-token: write
    needs: update-versions-json
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::152560469324:role/captain-cli-cd
          role-duration-seconds: 900
      - run: |
          latestV1="${{ steps.update-versions-json.outputs.latestV1 }}"
          sourceArtifactName=$(echo "captain-${{ matrix.os }}-${{ matrix.arch }}-$latestV1" | tr '[:upper:]' '[:lower:]')
          destinationArtifactName=$(echo "captain-${{ matrix.os }}-${{ matrix.arch }}-v1" | tr '[:upper:]' '[:lower:]')

          aws s3 cp "s3://terraform-20221109133415397600000001/$sourceArtifactName" "s3://terraform-20221109133415397600000001/$destinationArtifactName"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/$destinationArtifactName"
